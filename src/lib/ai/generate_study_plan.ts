"use server";
import { createClient } from "../supabase/server";
import OpenAi from "openai";
import { redirect } from "next/navigation";
import { fetchCurrentAndFutureEvents } from "../db/calendar/calendar_queries";
import { fetchUserPreferences } from "../db/fetch_user_preferences";

export const generate_study_plan = async () => {
  try {
    const supabase = await createClient();
    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user) {
      throw new Error("Could not find user");
    }

    const client = new OpenAi({ apiKey: process.env.OPENAI_API_SECRET_KEY });
    const events = await fetchCurrentAndFutureEvents();
    const user_preferences = await fetchUserPreferences();

    // Get user's classes for better context
    const { data: classes } = await supabase.from("classes").select("*");

    console.log(events);

    // Generate date range for the next 7 days
    const today = new Date();
    const nextWeek = new Date();
    nextWeek.setDate(today.getDate() + 7);

    const response = await client.responses.create({
      model: "o4-mini",
      input: `You are an AI study planner that generates personalized study calendar events. Your task is to create a comprehensive study schedule based on the user's existing calendar, preferences, and classes.

CRITICAL REQUIREMENTS:
1. SPREAD SESSIONS ACROSS MULTIPLE DAYS - Do NOT put all sessions on the same day
2. Generate 1-2 study sessions per day over the next 7 days
3. TRY TO FOLLOW THE HOURS PER WEEK THE USER SET  
4. Consider weekdays vs weekends differently
5. FOR TITLES ONLY PUT "AI - " THEN EITHER "Deep Work" or "Light Work"
6. DO NOT GO EARLIST THEN THE EARLIEST STUDY TIME and LATEST THENTHE LATEST STUDY TIME

TIME PERIOD: ${today.toISOString()} to ${nextWeek.toISOString()}

CONTEXT PROVIDED:
- Current and future calendar events (to avoid conflicts)
- User preferences (study times, duration preferences, etc.)
- User's classes and academic information

YOUR TASK:
Generate study session calendar events distributed across the next 7 days. Each event should be a study session optimized for the user's schedule and preferences.

CALENDAR_EVENTS TABLE SCHEMA:
- user_id: "${user.id}"
- title: text (study session title with "AI - " prefix)
- startStr: text (ISO datetime string)
- endStr: text (ISO datetime string)  
- event_type_name: "AutoGenerated"
- allDay: false
- description: text

DISTRIBUTION REQUIREMENTS:
- Generate 7-10 total sessions across 7 days
- Maximum 2 sessions per day
- Spread sessions across different days of the week
- Consider user's typical schedule patterns
- Vary session times throughout the day

SCHEDULING RULES:
1. Check existing events to avoid time conflicts
2. Respect user preferences for study times
3. Create realistic session durations (45min to 2.5 hours)
4. Leave at least 30 minutes between sessions on the same day
5. Consider meal times (avoid 12-1pm, 6-7pm unless user prefers)
6. Weekend sessions can be longer than weekday sessions

OUTPUT FORMAT:
Return ONLY a valid JSON array with no additional text. Each object must have:
{
  "title": "AI - [Subject/Topic] Study Session",
  "user_id": "${user.id}",
  "startStr": "YYYY-MM-DDTHH:MM:SS.000Z",
  "endStr": "YYYY-MM-DDTHH:MM:SS.000Z",
  "event_type_name": "AutoGenerated",
  "allDay": false,
  "description": "Deep work session focusing on [specific topics]. Recommended activities: [specific study activities]"
}

EXAMPLE DISTRIBUTION (DO NOT COPY TIMES, JUST PATTERN):
Day 1: 1 session (morning)
Day 2: 2 sessions (morning, afternoon)  
Day 3: 1 session (evening)
Day 4: 2 sessions (morning, late afternoon)
Day 5: 1 session (afternoon)
Day 6: 2 sessions (morning, afternoon) 
Day 7: 1 session (morning)

EXISTING CALENDAR EVENTS:
${JSON.stringify(events, null, 2)}

USER PREFERENCES:
${JSON.stringify(user_preferences, null, 2)}

USER CLASSES:
${JSON.stringify(classes, null, 2)}

CURRENT DATE: ${today.toISOString()}
END DATE: ${nextWeek.toISOString()}

Generate study sessions distributed across these 7 days, with each session on a different time and day to create a balanced weekly schedule.`,
    });

    const studyPlan = JSON.parse(response.output_text || "[]");

    // Validate the generated plan
    if (!Array.isArray(studyPlan)) {
      throw new Error("AI did not return a valid JSON array");
    }

    // Check for date distribution
    const dates = studyPlan.map((session) =>
      new Date(session.startStr).toDateString()
    );
    const uniqueDates = [...new Set(dates)];

    console.log(
      `Generated ${studyPlan.length} sessions across ${uniqueDates.length} unique days`
    );
    console.log("Dates:", uniqueDates);

    if (studyPlan && studyPlan.length > 0) {
      const { data, error } = await supabase
        .from("calendar_events")
        .insert(studyPlan)
        .select();

      if (error) {
        console.error("Database insertion error:", error);
        throw new Error(`Failed to save study plan: ${error.message}`);
      }

      return {
        success: true,
        events: data,
        summary: {
          totalSessions: data?.length || 0,
          uniqueDays: uniqueDates.length,
          dates: uniqueDates,
        },
      };
    }

    return { success: false, message: "No study sessions generated" };
  } catch (error) {
    console.error("Study plan generation error:", error);
    redirect(`/error?message=${encodeURIComponent(String(error))}`);
  }
};
